const fs = require("fs");
const path = require("path");

class VaultProtocolDemo {
  constructor() {
    this.apiBaseUrl = "http://localhost:3001/api";
    this.vaultBaseUrl = "http://localhost:3001/api/vault";
  }

  async makeRequest(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          "Content-Type": "application/json",
          ...options.headers,
        },
        ...options,
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error(`Request failed: ${error.message}`);
      throw error;
    }
  }

  async createTestFile(content, filename) {
    const file = new File([content], filename, { type: "text/plain" });
    return file;
  }

  async issueCertificate(email = "demo@example.com") {
    console.log("üßæ Issuing certificate...");

    // Create test certificate content
    const certificateContent = `
VAULT Protocol Certificate
========================

Certificate ID: ${Date.now()}
Issued To: ${email}
Issue Date: ${new Date().toISOString()}
Issuer: VAULT Protocol Demo

This is a test certificate generated by the VAULT Protocol demo.
The certificate is stored on IPFS and verified on the blockchain.

FID: Will be generated
CID: Will be generated from IPFS
    `.trim();

    const file = await this.createTestFile(
      certificateContent,
      "certificate.txt"
    );

    const formData = new FormData();
    formData.append("file", file);
    formData.append("email", email);
    formData.append("isPrivate", "false");

    const response = await this.makeRequest(
      `${this.apiBaseUrl}/certificates/issue`,
      {
        method: "POST",
        body: formData,
        headers: {}, // Let browser set Content-Type for FormData
      }
    );

    console.log("‚úÖ Certificate issued:", response.data);
    return response.data;
  }

  async verifyCertificate(fid, email) {
    console.log("üîç Verifying certificate...");

    const response = await this.makeRequest(
      `${this.apiBaseUrl}/certificates/verify`,
      {
        method: "POST",
        body: JSON.stringify({ fid, email }),
      }
    );

    console.log("‚úÖ Verification result:", response.data);
    return response.data;
  }

  async getCertificate(fid) {
    console.log("üìÑ Retrieving certificate...");

    const response = await this.makeRequest(
      `${this.apiBaseUrl}/certificates/${fid}`
    );

    console.log("‚úÖ Certificate retrieved:", response.data);
    return response.data;
  }

  async getFile(cid) {
    console.log("üìÅ Retrieving file...");

    const response = await fetch(`${this.apiBaseUrl}/files/${cid}`);

    if (!response.ok) {
      throw new Error(`Failed to retrieve file: ${response.statusText}`);
    }

    const fileContent = await response.text();
    console.log("‚úÖ File retrieved:", fileContent.substring(0, 100) + "...");
    return fileContent;
  }

  async testVaultScheme(fid, cid) {
    console.log("üîó Testing vault:// URL scheme...");

    const response = await this.makeRequest(
      `${this.vaultBaseUrl}/vault/${fid}/${cid}`,
      {
        headers: {
          "X-Vault-Scheme": `vault://${fid}/${cid}`,
        },
      }
    );

    console.log("‚úÖ Vault scheme response:", response);
    return response;
  }

  async updateCertificate(fid) {
    console.log("üîÑ Updating certificate...");

    const updatedContent = `
VAULT Protocol Certificate (Updated)
===================================

Certificate ID: ${Date.now()}
Updated Date: ${new Date().toISOString()}
Status: UPDATED

This certificate has been updated with new content.
The original FID remains the same, but a new CID is generated.
    `.trim();

    const file = await this.createTestFile(
      updatedContent,
      "updated-certificate.txt"
    );

    const formData = new FormData();
    formData.append("file", file);

    const response = await this.makeRequest(
      `${this.apiBaseUrl}/certificates/${fid}`,
      {
        method: "PUT",
        body: formData,
        headers: {}, // Let browser set Content-Type for FormData
      }
    );

    console.log("‚úÖ Certificate updated:", response.data);
    return response.data;
  }

  async deleteCertificate(fid) {
    console.log("üóëÔ∏è Deleting certificate...");

    const response = await this.makeRequest(
      `${this.apiBaseUrl}/certificates/${fid}`,
      {
        method: "DELETE",
      }
    );

    console.log("‚úÖ Certificate deleted:", response.data);
    return response.data;
  }

  async runDemo() {
    console.log("üöÄ Starting VAULT Protocol Demo...\n");

    try {
      // Check health
      console.log("üè• Checking system health...");
      const health = await this.makeRequest(`${this.apiBaseUrl}/health`);
      console.log("‚úÖ System health:", health.status);
      console.log("");

      // Issue certificate
      const certificate = await this.issueCertificate();
      const { fid, cid, email } = certificate;
      console.log("");

      // Verify certificate
      await this.verifyCertificate(fid, email);
      console.log("");

      // Get certificate details
      await this.getCertificate(fid);
      console.log("");

      // Get file content
      await this.getFile(cid);
      console.log("");

      // Test vault scheme
      await this.testVaultScheme(fid, cid);
      console.log("");

      // Update certificate
      const updatedCert = await this.updateCertificate(fid);
      console.log("");

      // Verify updated certificate
      await this.verifyCertificate(fid, email);
      console.log("");

      // Get updated file
      await this.getFile(updatedCert.newCid);
      console.log("");

      // Test vault scheme with updated CID
      await this.testVaultScheme(fid, updatedCert.newCid);
      console.log("");

      // Delete certificate
      await this.deleteCertificate(fid);
      console.log("");

      console.log("üéâ VAULT Protocol Demo completed successfully!");
    } catch (error) {
      console.error("‚ùå Demo failed:", error.message);
      console.error("Make sure the servers are running:");
      console.error("  npm start");
    }
  }
}

// Run demo if this file is executed directly
if (typeof window !== "undefined") {
  // Browser environment
  window.VaultProtocolDemo = VaultProtocolDemo;
} else {
  // Node.js environment
  const demo = new VaultProtocolDemo();
  demo.runDemo();
}

module.exports = VaultProtocolDemo;
